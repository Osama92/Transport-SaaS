import React, { useState, useEffect, useRef, useLayoutEffect } from 'react';
import type { Invoice, Client } from '../../types';
import InvoiceTemplate, { InvoiceTemplateType } from './InvoiceTemplates';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import Select from 'react-select';
import { XMarkIcon, DocumentTextIcon, EnvelopeIcon, CreditCardIcon, PlusIcon, TrashIcon, ChevronDownIcon, MagnifyingGlassPlusIcon, MagnifyingGlassMinusIcon, ArrowsPointingOutIcon } from '../Icons';
import { NIGERIAN_BANKS, PAYMENT_METHODS } from '../../constants/nigerianBanks';

interface InvoiceScreenModernProps {
    onCancel: () => void;
    onSave: (invoice: Invoice) => void;
    invoiceData?: Invoice | null;
    onEmailRequest: (invoice: Invoice) => void;
    clients: Client[];
}

// Load persisted invoice settings from localStorage
const loadPersistedSettings = () => {
    try {
        const stored = localStorage.getItem('invoiceSettings');
        if (stored) {
            return JSON.parse(stored);
        }
    } catch (error) {
        console.error('Error loading invoice settings:', error);
    }
    return null;
};

// Save invoice settings to localStorage
const saveInvoiceSettings = (invoice: Partial<Invoice>) => {
    try {
        const settingsToSave = {
            paymentDetails: invoice.paymentDetails,
            companyLogoUrl: invoice.companyLogoUrl,
            signatureUrl: invoice.signatureUrl,
            from: invoice.from,
        };
        localStorage.setItem('invoiceSettings', JSON.stringify(settingsToSave));
    } catch (error) {
        console.error('Error saving invoice settings:', error);
    }
};

const createInitialInvoice = (): Invoice => {
    const persisted = loadPersistedSettings();

    return {
        id: `INV${Date.now().toString().slice(-6)}`,
        project: '',
        issuedDate: new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }),
        dueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }),
        from: persisted?.from || {
            name: 'Your Company',
            address: '123 Main Street',
            email: 'billing@yourcompany.com',
            phone: '(555) 123-4567',
        },
        to: {
            name: '',
            address: '',
            email: '',
            phone: '',
        },
        items: [
            { id: 1, description: '', units: 1, price: 0 },
        ],
        notes: 'Thank you for your business.',
        paymentDetails: persisted?.paymentDetails || {
            method: 'Bank Transfer',
            accountName: 'Your Company Inc.',
            code: '123456',
            accountNumber: '987654321',
            bankName: 'Your Bank'
        },
        companyLogoUrl: persisted?.companyLogoUrl,
        signatureUrl: persisted?.signatureUrl,
        vatRate: 7.5,
        vatInclusive: false,
        status: 'Draft',
    };
};

const InvoiceScreenModern: React.FC<InvoiceScreenModernProps> = ({ onCancel, onSave, invoiceData, onEmailRequest, clients }) => {
    const [invoice, setInvoice] = useState<Invoice>(invoiceData || createInitialInvoice());
    const [selectedTemplate, setSelectedTemplate] = useState<InvoiceTemplateType>('pdf');
    const [showTemplates, setShowTemplates] = useState(false);
    const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);
    const [isSaving, setIsSaving] = useState(false);
    const [showSaveDropdown, setShowSaveDropdown] = useState(false);
    const [previewScale, setPreviewScale] = useState(1);
    const [manualZoom, setManualZoom] = useState(100); // Zoom percentage
    const [autoFitScale, setAutoFitScale] = useState(1);
    const previewContainerRef = useRef<HTMLDivElement>(null);
    const previewContentRef = useRef<HTMLDivElement>(null);
    const dropdownRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        if (invoiceData) {
            setInvoice(invoiceData);
        }
    }, [invoiceData]);

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
                setShowSaveDropdown(false);
            }
        };

        if (showSaveDropdown) {
            document.addEventListener('mousedown', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showSaveDropdown]);

    // Save settings whenever payment details, branding, or company info changes
    useEffect(() => {
        if (invoice) {
            saveInvoiceSettings(invoice);
        }
    }, [invoice.paymentDetails, invoice.companyLogoUrl, invoice.signatureUrl, invoice.from]);

    // Calculate auto-fit scale
    useLayoutEffect(() => {
        const calculateScale = () => {
            if (previewContainerRef.current && previewContentRef.current) {
                const container = previewContainerRef.current;

                // Get container dimensions (minus padding)
                const containerHeight = container.clientHeight - 64; // Account for 8*2 padding (p-8)
                const containerWidth = container.clientWidth - 64;

                // A4 dimensions in mm converted to pixels (approximate)
                const a4WidthPx = 794; // 210mm at 96 DPI
                const a4HeightPx = 1123; // 297mm at 96 DPI

                // Calculate scale needed to fit
                const scaleX = containerWidth / a4WidthPx;
                const scaleY = containerHeight / a4HeightPx;
                const scale = Math.min(scaleX, scaleY, 0.75); // Cap at 0.75 max scale

                setAutoFitScale(scale);
                // Apply the scale with manual zoom factor
                setPreviewScale(scale * (manualZoom / 100));
            }
        };

        calculateScale();
        window.addEventListener('resize', calculateScale);

        // Recalculate when template changes or container size changes
        const timer = setTimeout(calculateScale, 100);

        return () => {
            window.removeEventListener('resize', calculateScale);
            clearTimeout(timer);
        };
    }, [selectedTemplate, showTemplates, manualZoom]);

    // Zoom control functions
    const handleZoomIn = () => {
        setManualZoom(prev => Math.min(prev + 10, 300)); // Max 300%
    };

    const handleZoomOut = () => {
        setManualZoom(prev => Math.max(prev - 10, 50)); // Min 50%
    };

    const handleZoomReset = () => {
        setManualZoom(100); // Reset to fit
    };

    const handleGeneratePdf = async () => {
        console.log('=== PDF GENERATION DEBUG ===');
        console.log('Selected template:', selectedTemplate);
        console.log('Invoice data:', invoice);

        const input = document.getElementById('invoice-preview');
        if (!input) {
            console.error('invoice-preview element not found');
            return;
        }

        console.log('Found invoice-preview element, generating PDF using html2canvas...');

        setIsGeneratingPdf(true);

        try {
            // A4 dimensions at 96 DPI
            const a4Width = 210; // mm
            const a4Height = 297; // mm

            // Temporarily reset transform for accurate capture
            const originalTransform = input.style.transform;
            input.style.transform = 'scale(1)';

            console.log('Capturing invoice preview with html2canvas...');
            const canvas = await html2canvas(input, {
                scale: 2,
                useCORS: true,
                logging: false,
                width: input.scrollWidth,
                height: input.scrollHeight,
            });

            // Restore original transform
            input.style.transform = originalTransform;

            console.log('Canvas captured, creating PDF...');
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4');

            // Calculate proper dimensions to fit A4
            const imgWidth = a4Width;
            const imgHeight = (canvas.height * a4Width) / canvas.width;

            pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
            pdf.save(`Invoice-${invoice.id}.pdf`);

            console.log('PDF saved successfully using template:', selectedTemplate);
            pdf.setTextColor(255, 255, 255);
            pdf.setFontSize(28);
            pdf.setFont('helvetica', 'bold');
            pdf.text('INVOICE', margin, 25);

            // Company Logo (if available)
            if (invoice.companyLogoUrl) {
                try {
                    // Get image dimensions to maintain aspect ratio
                    const img = new Image();
                    img.src = invoice.companyLogoUrl;
                    await new Promise((resolve) => { img.onload = resolve; });

                    const logoMaxWidth = 30;
                    const logoMaxHeight = 20;
                    const imgRatio = img.width / img.height;

                    let logoWidth = logoMaxWidth;
                    let logoHeight = logoMaxWidth / imgRatio;

                    if (logoHeight > logoMaxHeight) {
                        logoHeight = logoMaxHeight;
                        logoWidth = logoMaxHeight * imgRatio;
                    }

                    pdf.addImage(invoice.companyLogoUrl, 'PNG', pageWidth - margin - logoWidth, 10, logoWidth, logoHeight);
                } catch (error) {
                    console.warn('Could not add logo to PDF:', error);
                }
            }

            // Invoice ID
            pdf.setFontSize(12);
            pdf.setFont('helvetica', 'normal');
            pdf.text(`#${invoice.id}`, pageWidth - margin, 25, { align: 'right' });

            yPos = 50;

            // From Section
            pdf.setTextColor(0, 0, 0);
            pdf.setFontSize(10);
            pdf.setFont('helvetica', 'bold');
            pdf.text('FROM', margin, yPos);
            yPos += 7;
            pdf.setFont('helvetica', 'normal');
            yPos = addText(invoice.from.name, margin, yPos, contentWidth / 2, 10, true);
            yPos = addText(invoice.from.address, margin, yPos, contentWidth / 2);
            yPos = addText(invoice.from.email, margin, yPos, contentWidth / 2);
            yPos = addText(invoice.from.phone, margin, yPos, contentWidth / 2);

            // To Section (right side)
            let rightYPos = 50;
            pdf.setFont('helvetica', 'bold');
            pdf.text('BILL TO', pageWidth - margin - (contentWidth / 2), rightYPos);
            rightYPos += 7;
            pdf.setFont('helvetica', 'normal');
            rightYPos = addText(invoice.to.name, pageWidth - margin - (contentWidth / 2), rightYPos, contentWidth / 2, 10, true);
            rightYPos = addText(invoice.to.address, pageWidth - margin - (contentWidth / 2), rightYPos, contentWidth / 2);
            rightYPos = addText(invoice.to.email, pageWidth - margin - (contentWidth / 2), rightYPos, contentWidth / 2);
            rightYPos = addText(invoice.to.phone, pageWidth - margin - (contentWidth / 2), rightYPos, contentWidth / 2);

            yPos = Math.max(yPos, rightYPos) + 15;

            // Date Information
            pdf.setFontSize(9);
            pdf.text(`Issue Date: ${invoice.issuedDate}`, margin, yPos);
            pdf.text(`Due Date: ${invoice.dueDate}`, pageWidth - margin, yPos, { align: 'right' });
            yPos += 15;

            // Table Header
            pdf.setFillColor(243, 244, 246);
            pdf.rect(margin, yPos - 5, contentWidth, 10, 'F');
            pdf.setFont('helvetica', 'bold');
            pdf.setFontSize(10);
            pdf.text('DESCRIPTION', margin + 2, yPos);
            pdf.text('QTY', margin + 100, yPos, { align: 'center' });
            pdf.text('PRICE', margin + 130, yPos, { align: 'right' });
            pdf.text('AMOUNT', pageWidth - margin - 2, yPos, { align: 'right' });
            yPos += 10;

            // Table Items
            pdf.setFont('helvetica', 'normal');
            pdf.setFontSize(9);
            invoice.items.forEach((item, index) => {
                const amount = item.units * item.price;

                // Description (with word wrap)
                const descLines = pdf.splitTextToSize(item.description, 90);
                pdf.text(descLines, margin + 2, yPos);

                // Quantity
                pdf.text(item.units.toString(), margin + 100, yPos, { align: 'center' });

                // Price
                pdf.text(`NGN ${item.price.toLocaleString()}`, margin + 130, yPos, { align: 'right' });

                // Amount
                pdf.text(`NGN ${amount.toLocaleString()}`, pageWidth - margin - 2, yPos, { align: 'right' });

                yPos += Math.max(descLines.length * 5, 8);

                // Add separator line
                if (index < invoice.items.length - 1) {
                    pdf.setDrawColor(229, 231, 235);
                    pdf.line(margin, yPos, pageWidth - margin, yPos);
                    yPos += 5;
                }
            });

            yPos += 10;

            // Total Section with VAT
            const subtotalCalc = subtotalAmount;
            const vatRateCalc = vatRate || 0;
            let subtotalFinal = subtotalCalc;
            let vatAmountCalc = 0;
            let totalAmountCalc = subtotalCalc;

            if (vatRateCalc > 0) {
                if (vatInclusive) {
                    subtotalFinal = subtotalCalc / (1 + vatRateCalc / 100);
                    vatAmountCalc = subtotalCalc - subtotalFinal;
                    totalAmountCalc = subtotalCalc;
                } else {
                    subtotalFinal = subtotalCalc;
                    vatAmountCalc = subtotalCalc * (vatRateCalc / 100);
                    totalAmountCalc = subtotalCalc + vatAmountCalc;
                }
            }

            pdf.setDrawColor(229, 231, 235);
            pdf.setLineWidth(0.3);
            pdf.line(pageWidth - margin - 80, yPos, pageWidth - margin, yPos);
            yPos += 7;

            // Subtotal
            pdf.setFont('helvetica', 'normal');
            pdf.setFontSize(10);
            pdf.text('Subtotal', pageWidth - margin - 80, yPos);
            pdf.text(`NGN ${subtotalFinal.toLocaleString('en-NG', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`, pageWidth - margin - 2, yPos, { align: 'right' });
            yPos += 6;

            // VAT (if applicable)
            if (vatRateCalc > 0) {
                pdf.text(`VAT (${vatRateCalc}% ${vatInclusive ? 'Inclusive' : 'Exclusive'})`, pageWidth - margin - 80, yPos);
                pdf.text(`NGN ${vatAmountCalc.toLocaleString('en-NG', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`, pageWidth - margin - 2, yPos, { align: 'right' });
                yPos += 6;
            }

            // Total line
            pdf.setDrawColor(0, 0, 0);
            pdf.setLineWidth(0.5);
            pdf.line(pageWidth - margin - 80, yPos, pageWidth - margin, yPos);
            yPos += 7;

            pdf.setFont('helvetica', 'bold');
            pdf.setFontSize(12);
            pdf.text('TOTAL', pageWidth - margin - 80, yPos);
            pdf.text(`NGN ${totalAmountCalc.toLocaleString('en-NG', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`, pageWidth - margin - 2, yPos, { align: 'right' });
            yPos += 15;

            // Payment Details
            if (invoice.paymentDetails) {
                pdf.setFontSize(10);
                pdf.setFont('helvetica', 'bold');
                pdf.text('PAYMENT DETAILS', margin, yPos);
                yPos += 7;

                pdf.setFont('helvetica', 'normal');
                pdf.setFontSize(9);
                pdf.text(`Method: ${invoice.paymentDetails.method}`, margin, yPos);
                yPos += 5;

                if (invoice.paymentDetails.method === 'Bank Transfer') {
                    if (invoice.paymentDetails.bankName) {
                        pdf.text(`Bank: ${invoice.paymentDetails.bankName}`, margin, yPos);
                        yPos += 5;
                    }
                    if (invoice.paymentDetails.accountName) {
                        pdf.text(`Account Name: ${invoice.paymentDetails.accountName}`, margin, yPos);
                        yPos += 5;
                    }
                    if (invoice.paymentDetails.accountNumber) {
                        pdf.text(`Account Number: ${invoice.paymentDetails.accountNumber}`, margin, yPos);
                        yPos += 5;
                    }
                } else if (invoice.paymentDetails.method === 'Cheque') {
                    if (invoice.paymentDetails.accountName) {
                        pdf.text(`Payable To: ${invoice.paymentDetails.accountName}`, margin, yPos);
                        yPos += 5;
                    }
                } else if (invoice.paymentDetails.method === 'Cash') {
                    pdf.text('Payment to be made in cash upon receipt.', margin, yPos);
                    yPos += 5;
                }

                yPos += 5;
            }

            // Notes
            if (invoice.notes) {
                pdf.setFont('helvetica', 'bold');
                pdf.setFontSize(10);
                pdf.text('NOTES', margin, yPos);
                yPos += 7;
                pdf.setFont('helvetica', 'normal');
                pdf.setFontSize(9);
                const notesLines = pdf.splitTextToSize(invoice.notes, contentWidth);
                pdf.text(notesLines, margin, yPos);
                yPos += notesLines.length * 5 + 10;
            }

            // Signature (if available)
            if (invoice.signatureUrl) {
                try {
                    pdf.setFont('helvetica', 'bold');
                    pdf.setFontSize(10);
                    pdf.setTextColor(0, 0, 0);
                    pdf.text('Authorized Signature', margin, yPos);
                    yPos += 5;

                    // Get signature dimensions to maintain aspect ratio
                    const sigImg = new Image();
                    sigImg.src = invoice.signatureUrl;
                    await new Promise((resolve) => { sigImg.onload = resolve; });

                    const sigMaxWidth = 50;
                    const sigMaxHeight = 20;
                    const sigRatio = sigImg.width / sigImg.height;

                    let sigWidth = sigMaxWidth;
                    let sigHeight = sigMaxWidth / sigRatio;

                    if (sigHeight > sigMaxHeight) {
                        sigHeight = sigMaxHeight;
                        sigWidth = sigMaxHeight * sigRatio;
                    }

                    pdf.addImage(invoice.signatureUrl, 'PNG', margin, yPos, sigWidth, sigHeight);
                    yPos += sigHeight + 5;
                } catch (error) {
                    console.warn('Could not add signature to PDF:', error);
                }
            }

            // Footer
            pdf.setFontSize(8);
            pdf.setTextColor(128, 128, 128);
            pdf.text('Thank you for your business!', pageWidth / 2, pageHeight - 15, { align: 'center' });

            console.log('PDF generated with custom jsPDF code');
            console.log('ISSUE: This PDF uses hardcoded layout, NOT the InvoiceTemplate component');
            console.log('SOLUTION: Should use html2canvas on invoice-preview element instead');

            pdf.save(`Invoice-${invoice.id}.pdf`);
        } catch (error) {
            console.error('Error generating PDF:', error);
            alert('Failed to generate PDF. Please try again.');
        } finally {
            console.log('=== PDF GENERATION END ===');
            setIsGeneratingPdf(false);
        }
    };

    const handleSave = async (status: 'Draft' | 'Sent') => {
        setIsSaving(true);
        setShowSaveDropdown(false);
        await new Promise(resolve => setTimeout(resolve, 500)); // Simulate save
        onSave({ ...invoice, status });
        setIsSaving(false);
    };

    const addItem = () => {
        setInvoice(prev => ({
            ...prev,
            items: [...prev.items, { id: Date.now(), description: '', units: 1, price: 0 }]
        }));
    };

    const removeItem = (id: number) => {
        setInvoice(prev => ({
            ...prev,
            items: prev.items.filter(item => item.id !== id)
        }));
    };

    const updateItem = (id: number, field: string, value: any) => {
        setInvoice(prev => ({
            ...prev,
            items: prev.items.map(item =>
                item.id === id ? { ...item, [field]: value } : item
            )
        }));
    };

    // Calculate amounts with VAT
    const subtotalAmount = invoice.items.reduce((sum, item) => sum + (item.units * item.price), 0);
    const vatRate = invoice.vatRate || 0;
    const vatInclusive = invoice.vatInclusive || false;

    let subtotal = subtotalAmount;
    let vatAmount = 0;
    let totalAmount = subtotalAmount;

    if (vatRate > 0) {
        if (vatInclusive) {
            // VAT is included in the price, so we extract it
            subtotal = subtotalAmount / (1 + vatRate / 100);
            vatAmount = subtotalAmount - subtotal;
            totalAmount = subtotalAmount;
        } else {
            // VAT is added on top
            subtotal = subtotalAmount;
            vatAmount = subtotalAmount * (vatRate / 100);
            totalAmount = subtotalAmount + vatAmount;
        }
    }

    const templates = [
        { id: 'classic' as InvoiceTemplateType, name: 'Classic', icon: '📄' },
        { id: 'modern' as InvoiceTemplateType, name: 'Modern', icon: '🎨' },
        { id: 'minimal' as InvoiceTemplateType, name: 'Minimal', icon: '✨' },
        { id: 'professional' as InvoiceTemplateType, name: 'Professional', icon: '💼' },
    ];

    return (
        <div className="fixed inset-0 bg-white dark:bg-slate-900 z-50 flex flex-col">
            {/* Header */}
            <div className="flex-shrink-0 flex items-center justify-between px-8 py-5 border-b border-gray-200 dark:border-slate-700">
                <div className="flex items-center gap-4">
                    <h1 className="text-xl font-bold text-gray-900 dark:text-gray-100">
                        {invoiceData ? 'Edit Invoice' : 'Create Invoice'}
                    </h1>
                </div>
                <div className="flex items-center gap-3">
                    <button
                        onClick={onCancel}
                        className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
                        title="Close"
                    >
                        <XMarkIcon className="w-5 h-5" />
                    </button>
                </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex overflow-hidden">
                {/* Left Panel - Form */}
                <div className="w-full lg:w-5/12 overflow-y-auto bg-gray-50 dark:bg-slate-800/50 p-8">
                    <div className="max-w-xl mx-auto space-y-6">
                        {/* Invoice Details Section */}
                        <div>
                            <h2 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-4">Invoice Details</h2>

                            {/* Client Selection */}
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Client <span className="text-red-500">*</span>
                                </label>
                                <select
                                    value={invoice.to.name}
                                    onChange={(e) => {
                                        const client = clients.find(c => c.name === e.target.value);
                                        if (client) {
                                            setInvoice(prev => ({
                                                ...prev,
                                                to: {
                                                    name: client.name,
                                                    address: client.address || '',
                                                    email: client.email,
                                                    phone: client.phone || ''
                                                }
                                            }));
                                        }
                                    }}
                                    className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400"
                                >
                                    <option value="">Select a client</option>
                                    {clients.map(client => (
                                        <option key={client.id} value={client.name}>{client.name}</option>
                                    ))}
                                </select>
                                {invoice.to.name && (
                                    <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">{invoice.to.email}</p>
                                )}
                            </div>

                            {/* Due Date */}
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Due date</label>
                                <input
                                    type="date"
                                    value={new Date(invoice.dueDate).toISOString().split('T')[0]}
                                    onChange={(e) => setInvoice(prev => ({
                                        ...prev,
                                        dueDate: new Date(e.target.value).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })
                                    }))}
                                    className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                />
                            </div>

                            {/* Template Selector */}
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Template</label>
                                <div className="relative">
                                    <button
                                        onClick={() => setShowTemplates(!showTemplates)}
                                        className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm text-left flex items-center justify-between hover:border-indigo-300 dark:hover:border-indigo-600 transition-colors"
                                    >
                                        <span className="flex items-center gap-2">
                                            <span className="text-lg">{templates.find(t => t.id === selectedTemplate)?.icon}</span>
                                            <span className="capitalize">{selectedTemplate}</span>
                                        </span>
                                        <ChevronDownIcon className={`w-4 h-4 text-gray-400 transition-transform ${showTemplates ? 'rotate-180' : ''}`} />
                                    </button>
                                    {showTemplates && (
                                        <div className="absolute z-10 w-full mt-1 bg-white dark:bg-slate-700 border border-gray-200 dark:border-slate-600 rounded-lg shadow-lg">
                                            {templates.map(template => (
                                                <button
                                                    key={template.id}
                                                    onClick={() => {
                                                        setSelectedTemplate(template.id);
                                                        setShowTemplates(false);
                                                    }}
                                                    className="w-full px-4 py-2.5 text-left hover:bg-gray-50 dark:hover:bg-slate-600 flex items-center gap-2 transition-colors first:rounded-t-lg last:rounded-b-lg"
                                                >
                                                    <span className="text-lg">{template.icon}</span>
                                                    <span className="text-sm">{template.name}</span>
                                                </button>
                                            ))}
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Product Section */}
                        <div>
                            <h2 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-4">Items</h2>
                            <div className="space-y-3">
                                {invoice.items.map((item, index) => (
                                    <div key={item.id} className="bg-white dark:bg-slate-700 rounded-lg border border-gray-200 dark:border-slate-600 p-4">
                                        <div className="flex items-start gap-3">
                                            <div className="flex-1 space-y-3">
                                                <input
                                                    type="text"
                                                    value={item.description}
                                                    onChange={(e) => updateItem(item.id, 'description', e.target.value)}
                                                    placeholder="Item description"
                                                    className="w-full px-3 py-2 bg-gray-50 dark:bg-slate-600 border border-gray-200 dark:border-slate-500 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                />
                                                <div className="grid grid-cols-3 gap-3">
                                                    <div>
                                                        <label className="block text-xs text-gray-500 dark:text-gray-400 mb-1">Qty</label>
                                                        <input
                                                            type="number"
                                                            value={item.units}
                                                            onChange={(e) => updateItem(item.id, 'units', parseInt(e.target.value) || 0)}
                                                            className="w-full px-3 py-2 bg-gray-50 dark:bg-slate-600 border border-gray-200 dark:border-slate-500 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                        />
                                                    </div>
                                                    <div>
                                                        <label className="block text-xs text-gray-500 dark:text-gray-400 mb-1">Price</label>
                                                        <input
                                                            type="number"
                                                            value={item.price}
                                                            onChange={(e) => updateItem(item.id, 'price', parseFloat(e.target.value) || 0)}
                                                            className="w-full px-3 py-2 bg-gray-50 dark:bg-slate-600 border border-gray-200 dark:border-slate-500 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                                        />
                                                    </div>
                                                    <div>
                                                        <label className="block text-xs text-gray-500 dark:text-gray-400 mb-1">Amount</label>
                                                        <div className="px-3 py-2 bg-gray-100 dark:bg-slate-800 border border-gray-200 dark:border-slate-500 rounded-md text-sm font-semibold">
                                                            ₦{(item.units * item.price).toLocaleString()}
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            {invoice.items.length > 1 && (
                                                <button
                                                    onClick={() => removeItem(item.id)}
                                                    className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors"
                                                >
                                                    <TrashIcon className="w-4 h-4" />
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </div>
                            <button
                                onClick={addItem}
                                className="mt-3 flex items-center gap-2 text-sm text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 font-medium"
                            >
                                <PlusIcon className="w-4 h-4" />
                                Add New Line
                            </button>
                        </div>

                        {/* VAT Section */}
                        <div>
                            <h2 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-4">VAT Settings</h2>

                            <div className="grid grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">VAT Rate (%)</label>
                                    <input
                                        type="number"
                                        step="0.1"
                                        value={invoice.vatRate || 0}
                                        onChange={(e) => setInvoice(prev => ({ ...prev, vatRate: parseFloat(e.target.value) || 0 }))}
                                        placeholder="7.5"
                                        className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">VAT Type</label>
                                    <select
                                        value={invoice.vatInclusive ? 'inclusive' : 'exclusive'}
                                        onChange={(e) => setInvoice(prev => ({ ...prev, vatInclusive: e.target.value === 'inclusive' }))}
                                        className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                    >
                                        <option value="exclusive">Exclusive (add VAT)</option>
                                        <option value="inclusive">Inclusive (VAT included)</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        {/* Payment Details Section */}
                        <div>
                            <h2 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-4">Payment Details</h2>

                            <div className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Payment Method</label>
                                    <Select
                                        value={PAYMENT_METHODS.find(m => m.value === invoice.paymentDetails?.method)}
                                        onChange={(option) => setInvoice(prev => ({
                                            ...prev,
                                            paymentDetails: { ...prev.paymentDetails!, method: option?.value || 'Bank Transfer' }
                                        }))}
                                        options={PAYMENT_METHODS}
                                        className="react-select-container"
                                        classNamePrefix="react-select"
                                        placeholder="Select payment method"
                                    />
                                </div>

                                {invoice.paymentDetails?.method === 'Bank Transfer' && (
                                    <>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Bank Name</label>
                                            <Select
                                                value={NIGERIAN_BANKS.find(b => b.value === invoice.paymentDetails?.bankName)}
                                                onChange={(option) => setInvoice(prev => ({
                                                    ...prev,
                                                    paymentDetails: { ...prev.paymentDetails!, bankName: option?.value || '' }
                                                }))}
                                                options={NIGERIAN_BANKS}
                                                className="react-select-container"
                                                classNamePrefix="react-select"
                                                placeholder="Search and select bank"
                                                isClearable
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Account Name</label>
                                            <input
                                                type="text"
                                                value={invoice.paymentDetails?.accountName || ''}
                                                onChange={(e) => setInvoice(prev => ({
                                                    ...prev,
                                                    paymentDetails: { ...prev.paymentDetails!, accountName: e.target.value }
                                                }))}
                                                placeholder="Your Company Inc."
                                                className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                            />
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Account Number</label>
                                            <input
                                                type="text"
                                                value={invoice.paymentDetails?.accountNumber || ''}
                                                onChange={(e) => setInvoice(prev => ({
                                                    ...prev,
                                                    paymentDetails: { ...prev.paymentDetails!, accountNumber: e.target.value }
                                                }))}
                                                placeholder="0123456789"
                                                maxLength={10}
                                                className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                            />
                                        </div>
                                    </>
                                )}

                                {invoice.paymentDetails?.method === 'Cheque' && (
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Payable To</label>
                                        <input
                                            type="text"
                                            value={invoice.paymentDetails?.accountName || ''}
                                            onChange={(e) => setInvoice(prev => ({
                                                ...prev,
                                                paymentDetails: { ...prev.paymentDetails!, accountName: e.target.value }
                                            }))}
                                            placeholder="Your Company Inc."
                                            className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                        />
                                    </div>
                                )}

                                {invoice.paymentDetails?.method === 'Cash' && (
                                    <p className="text-sm text-gray-500 dark:text-gray-400 italic">
                                        Payment to be made in cash upon receipt of invoice.
                                    </p>
                                )}
                            </div>
                        </div>

                        {/* Company Logo Upload */}
                        <div>
                            <h2 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-4">Branding</h2>

                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Company Logo</label>
                                <div className="flex items-center gap-3">
                                    {invoice.companyLogoUrl && (
                                        <img src={invoice.companyLogoUrl} alt="Company Logo" className="h-12 w-12 object-contain rounded border border-gray-200 dark:border-slate-600" />
                                    )}
                                    <label className="flex-1 cursor-pointer">
                                        <div className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm text-center hover:bg-gray-50 dark:hover:bg-slate-600 transition-colors">
                                            {invoice.companyLogoUrl ? 'Change Logo' : 'Upload Logo'}
                                        </div>
                                        <input
                                            type="file"
                                            accept="image/*"
                                            onChange={(e) => {
                                                const file = e.target.files?.[0];
                                                if (file) {
                                                    const reader = new FileReader();
                                                    reader.onloadend = () => {
                                                        setInvoice(prev => ({ ...prev, companyLogoUrl: reader.result as string }));
                                                    };
                                                    reader.readAsDataURL(file);
                                                }
                                            }}
                                            className="hidden"
                                        />
                                    </label>
                                    {invoice.companyLogoUrl && (
                                        <button
                                            onClick={() => setInvoice(prev => ({ ...prev, companyLogoUrl: undefined }))}
                                            className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors"
                                        >
                                            <TrashIcon className="w-4 h-4" />
                                        </button>
                                    )}
                                </div>
                            </div>

                            {/* Signature Upload */}
                            <div>
                                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Signature</label>
                                <div className="flex items-center gap-3">
                                    {invoice.signatureUrl && (
                                        <img src={invoice.signatureUrl} alt="Signature" className="h-12 w-24 object-contain rounded border border-gray-200 dark:border-slate-600 bg-white" />
                                    )}
                                    <label className="flex-1 cursor-pointer">
                                        <div className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm text-center hover:bg-gray-50 dark:hover:bg-slate-600 transition-colors">
                                            {invoice.signatureUrl ? 'Change Signature' : 'Upload Signature'}
                                        </div>
                                        <input
                                            type="file"
                                            accept="image/*"
                                            onChange={(e) => {
                                                const file = e.target.files?.[0];
                                                if (file) {
                                                    const reader = new FileReader();
                                                    reader.onloadend = () => {
                                                        setInvoice(prev => ({ ...prev, signatureUrl: reader.result as string }));
                                                    };
                                                    reader.readAsDataURL(file);
                                                }
                                            }}
                                            className="hidden"
                                        />
                                    </label>
                                    {invoice.signatureUrl && (
                                        <button
                                            onClick={() => setInvoice(prev => ({ ...prev, signatureUrl: undefined }))}
                                            className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors"
                                        >
                                            <TrashIcon className="w-4 h-4" />
                                        </button>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Notes */}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Notes</label>
                            <textarea
                                value={invoice.notes}
                                onChange={(e) => setInvoice(prev => ({ ...prev, notes: e.target.value }))}
                                rows={3}
                                placeholder="Additional notes or payment terms"
                                className="w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none"
                            />
                        </div>

                        {/* Save Info */}
                        <div className="text-xs text-gray-500 dark:text-gray-400 pt-4">
                            Last saved: Today at {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                        </div>
                    </div>
                </div>

                {/* Right Panel - Preview */}
                <div className="hidden lg:flex lg:w-7/12 flex-col bg-gray-100 dark:bg-slate-900">
                    {/* Preview Header */}
                    <div className="flex-shrink-0 flex items-center justify-between px-8 py-5 bg-white dark:bg-slate-800 border-b border-gray-200 dark:border-slate-700">
                        <div className="flex items-center gap-4">
                            <h2 className="text-sm font-semibold text-gray-700 dark:text-gray-300">
                                Preview
                            </h2>

                            {/* Zoom Controls */}
                            <div className="flex items-center gap-1 bg-gray-100 dark:bg-slate-700 rounded-lg p-1">
                                <button
                                    onClick={handleZoomOut}
                                    disabled={manualZoom <= 50}
                                    className="p-1.5 hover:bg-white dark:hover:bg-slate-600 rounded transition-colors disabled:opacity-30 disabled:cursor-not-allowed"
                                    title="Zoom Out"
                                >
                                    <MagnifyingGlassMinusIcon className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                </button>
                                <button
                                    onClick={handleZoomReset}
                                    className="px-2 py-1 min-w-[60px] text-xs font-medium text-gray-700 dark:text-gray-300 hover:bg-white dark:hover:bg-slate-600 rounded transition-colors"
                                    title="Reset Zoom"
                                >
                                    {manualZoom}%
                                </button>
                                <button
                                    onClick={handleZoomIn}
                                    disabled={manualZoom >= 300}
                                    className="p-1.5 hover:bg-white dark:hover:bg-slate-600 rounded transition-colors disabled:opacity-30 disabled:cursor-not-allowed"
                                    title="Zoom In"
                                >
                                    <MagnifyingGlassPlusIcon className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                </button>
                                <div className="w-px h-4 bg-gray-300 dark:bg-slate-600 mx-1" />
                                <button
                                    onClick={handleZoomReset}
                                    className="p-1.5 hover:bg-white dark:hover:bg-slate-600 rounded transition-colors"
                                    title="Fit to View"
                                >
                                    <ArrowsPointingOutIcon className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                </button>
                            </div>
                        </div>
                        <div className="flex items-center gap-2">
                            <button
                                onClick={handleGeneratePdf}
                                disabled={isGeneratingPdf}
                                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-600 transition-colors disabled:opacity-50"
                            >
                                <DocumentTextIcon className="w-4 h-4" />
                                PDF
                            </button>
                            <button
                                onClick={() => onEmailRequest(invoice)}
                                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-600 transition-colors"
                            >
                                <EnvelopeIcon className="w-4 h-4" />
                                Email
                            </button>
                            <button className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-700 border border-gray-300 dark:border-slate-600 rounded-lg hover:bg-gray-50 dark:hover:bg-slate-600 transition-colors">
                                <CreditCardIcon className="w-4 h-4" />
                                Payment page
                            </button>
                        </div>
                    </div>

                    {/* Preview Content - Auto-scaled with zoom controls */}
                    <div
                        className="flex-1 overflow-auto p-8"
                        ref={previewContainerRef}
                        style={{
                            // Only allow scroll when zoomed in beyond fit
                            overflow: manualZoom > 100 ? 'auto' : 'hidden'
                        }}
                    >
                        <div className="w-full min-h-full flex items-start justify-center">
                            <div
                                ref={previewContentRef}
                                id="invoice-preview"
                                className="bg-white rounded-lg shadow-2xl"
                                style={{
                                    transform: `scale(${previewScale})`,
                                    transformOrigin: 'top center',
                                    transition: 'transform 0.2s ease-in-out',
                                    marginBottom: '50px' // Add some space at the bottom when scrolling
                                }}
                            >
                                <InvoiceTemplate invoice={invoice} template={selectedTemplate} />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Footer - Save Button with Dropdown */}
            <div className="flex-shrink-0 flex items-center justify-between px-8 py-4 bg-white dark:bg-slate-800 border-t border-gray-200 dark:border-slate-700">
                <button
                    onClick={onCancel}
                    className="px-6 py-2.5 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
                >
                    Cancel
                </button>
                <div className="relative" ref={dropdownRef}>
                    <div className="flex items-center gap-0">
                        <button
                            onClick={() => handleSave('Sent')}
                            disabled={isSaving || !invoice.to.name}
                            className="px-8 py-2.5 bg-gray-900 dark:bg-indigo-600 hover:bg-gray-800 dark:hover:bg-indigo-700 text-white font-semibold rounded-l-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isSaving ? 'Saving...' : 'Save & Send'}
                        </button>
                        <button
                            onClick={() => setShowSaveDropdown(!showSaveDropdown)}
                            disabled={isSaving || !invoice.to.name}
                            className="px-3 py-2.5 bg-gray-900 dark:bg-indigo-600 hover:bg-gray-800 dark:hover:bg-indigo-700 text-white font-semibold rounded-r-lg border-l border-gray-700 dark:border-indigo-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                    </div>
                    {showSaveDropdown && (
                        <div className="absolute right-0 bottom-full mb-2 w-48 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-gray-200 dark:border-slate-700 py-1 z-50">
                            <button
                                onClick={() => handleSave('Draft')}
                                className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors"
                            >
                                Save as Draft
                            </button>
                            <button
                                onClick={() => handleSave('Sent')}
                                className="w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors"
                            >
                                Save & Send
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default InvoiceScreenModern;
